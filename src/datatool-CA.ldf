%\section{datatool-CA.ldf}\label{sec:code:datatool-CA}
% Support for region CA.
%    \begin{macrocode}
\TrackLangProvidesResource{CA}%%FILEVERSION%%
%    \end{macrocode}
% Switch on \LaTeX3 syntax:
%    \begin{macrocode}
\ExplSyntaxOn
%    \end{macrocode}
%
%\subsection{Numbers and Currency}
% NB the number group and decimal symbols for this region should be
% set in the files \file{datatool-en-CA.ldf} and
% \file{datatool-fr-CA.ldf} as they depend on both the language
% and region. Those files should be included in the applicable
% \sty{datatool} language module. For example,
% \file{datatool-en-CA.ldf} is provided with
% \file{datatool-english}.
% However, a region hook is still needed to support 
%\verb|\DTLsetup{numeric={region-number-chars}}| although it's not
%added to the language hook:
%    \begin{macrocode}
\newcommand \datatoolCASetNumberChars
 {
   \bool_if:NT \l_datatool_region_set_numberchars_bool
    {
      \tl_if_empty:NTF \l_datatool_current_language_tl
       {
          \PackageWarning { datatool-CA }
           {
              No ~ current ~ language: ~ can't ~ set ~
              number ~ group ~ and ~ decimal ~ characters
           }
       }
       {
         \cs_if_exist_use:cF
          { datatool \l_datatool_current_language_tl CASetNumberChars }
           {
             \PackageWarning { datatool-CA }
              {
                 No ~ support ~ for ~ locale ~
                 ` \l_datatool_current_language_tl - CA': ~ can't ~ set ~
                 number ~ group ~ and ~ decimal ~ characters
              }
           }
       }
    }
 }
%    \end{macrocode}
%
% Set the currency format for this region.
%    \begin{macrocode} 
\newcommand \datatoolCAcurrencyfmt [ 2 ]
 { 
   \dtlcurrprefixfmt
    {
      \datatoolCAsymbolprefix { CA }
      #1
    }
    { #2 }
 }
%    \end{macrocode}
%Prefix for symbol, if required.
%    \begin{macrocode}
\newcommand \datatoolCAsymbolprefix [ 1 ] { }
%    \end{macrocode}
% Define the currency symbols for this region.
%    \begin{macrocode}
\datatool_def_currency:nnnV 
 { \datatoolCAcurrencyfmt }
 { CAD }
 { \$ }
 \c_dollar_str
%    \end{macrocode}
% Provide a command to set the currency for this region (for use
% with any hook used when the locale changes).
% NB this should do nothing with
% \verb|\DTLsetup{region-currency=false}|
%    \begin{macrocode}
\newcommand \datatoolCASetCurrency
 {
   \bool_if:NT \l_datatool_region_set_currency_bool
    {
      \DTLsetdefaultcurrency { CAD }
%    \end{macrocode}
%Number of digits that \cs{DTLdecimaltocurrency} should round to:
%    \begin{macrocode}
      \renewcommand \DTLCurrentLocaleCurrencyDP { 2 }
    }
 }
%    \end{macrocode}
%\subsection{Date and Time Parsing}
% Date parsing is more complicated as there seems to be a confusing
% mixture of ISO, day/month/year and month/day/year formats.
% This defaults to year-month-day and should be changed as
% appropriate using \cs{DTLsetLocaleOptions}. For example:
%\begin{dispListing}
%\DTLsetLocaleOptions{CA}{date-style=dmyyyy, date-variant=slash}
%\end{dispListing}
%An appropriate language file will need to also be installed to
%parse dates containing month names or day of week names.
%
% Provide a way to configure parsing style.
%    \begin{macrocode}
\tl_new:N \l__datatool_CA_datevariant_tl
\tl_set:Nn \l__datatool_CA_datevariant_tl { hyphen }
\tl_new:N \l__datatool_CA_datestyle_tl
\tl_set:Nn \l__datatool_CA_datestyle_tl { yyyymmdd }
\tl_new:N \l__datatool_CA_timevariant_tl
\tl_set:Nn \l__datatool_CA_timevariant_tl { colon }
%    \end{macrocode}
%\subsubsection{Time Stamp Parsing}
%Use command
%\cs{datatool\_}\meta{date-style}\verb|_hhmmss_tz_parse_timestamp:nnNnTF|
%with date regular expression 
%\cs{c\_datatool\_}\meta{date-variant}\verb|_|\meta{date-style}\verb|_date_regex|
%and time regular expression
%\cs{c\_datatool\_}\meta{time-variant}\verb|_hhmmss_time_regex|
%    \begin{macrocode}
\cs_new:Nn \datatool_CA_parse_timestamp:NnTF
 {
   \cs_if_exist:cTF
     {
       datatool_
       \l__datatool_CA_datestyle_tl
       _hhmmss_tz_parse_timestamp:ccNnTF
     }
    {
      \cs_if_exist:cTF
       {
          c_datatool_
          \l__datatool_CA_datevariant_tl
          _ 
          \l__datatool_CA_datestyle_tl
          _date_regex
       }
       {
         \cs_if_exist:cTF
          { 
            c_datatool_
            \l__datatool_CA_timevariant_tl
            _hhmmss_time_regex
          }
          {
            \use:c
             {
               datatool_
              \l__datatool_CA_datestyle_tl
              _hhmmss_tz_parse_timestamp:ccNnTF
             }
             { 
               c_datatool_
               \l__datatool_CA_datevariant_tl
               _ 
               \l__datatool_CA_datestyle_tl
               _date_regex
             }
             { 
               c_datatool_
               \l__datatool_CA_timevariant_tl
               _hhmmss_time_regex
             }
              #1 { #2 } { #3 } { #4 }
          }
          {
            \PackageWarning { datatool-CA }
             {
              No ~ support ~ for ~ time ~ variant ~
              ` \l__datatool_CA_timevariant_tl '
             }
            #4
          }
       }
       {
         \PackageWarning { datatool-CA }
          {
           No ~ support ~ for ~ date ~ style ~
           ` \l__datatool_CA_datestyle_tl ' ~ with ~
           variant ~
           ` \l__datatool_CA_datevariant_tl '
          }
         #4
       }
    }
    {
      \PackageWarning { datatool-CA }
       {
          No ~ support ~ for ~ date ~ style ~
          ` \l__datatool_CA_datestyle_tl '
       }
      #4
    }
 }
%    \end{macrocode}
%\subsubsection{Date Parsing}
%Use command \cs{datatool\_}\meta{style}\verb|_parse_date:NNnTF|
%with regular expression 
%\cs{c\_datatool\_}\meta{variant}\verb|_anchored_|\meta{style}\verb|_date_regex|
%    \begin{macrocode}
\cs_new:Nn \datatool_CA_parse_date:NnTF
 {
   \cs_if_exist:cTF
     {
       datatool_
       \l__datatool_CA_datestyle_tl
       _parse_date:NNnTF
     }
    {
      \cs_if_exist:cTF
       {
         c_datatool_
         \l__datatool_CA_datevariant_tl
         _anchored_ 
         \l__datatool_CA_datestyle_tl
         _date_regex
       }
       {
         \exp_args:cc
         {
           datatool_
           \l__datatool_CA_datestyle_tl
           _parse_date:NNnTF
         }
         { 
           c_datatool_
           \l__datatool_CA_datevariant_tl
           _anchored_ 
           \l__datatool_CA_datestyle_tl
           _date_regex
         }
          #1 { #2 } { #3 } { #4 }
       }
       {
         \PackageWarning { datatool-CA }
          {
           No ~ support ~ for ~ date ~ style ~
           ` \l__datatool_CA_datestyle_tl ' ~ with ~
           variant ~
           ` \l__datatool_CA_datevariant_tl '
          }
         #4
       }
    }
    {
      \PackageWarning { datatool-CA }
       {
          No ~ support ~ for ~ date ~ style ~
          ` \l__datatool_CA_datestyle_tl '
       }
      #4
    }
 }
%    \end{macrocode}
%\subsubsection{Time Parsing}
%Use command \cs{datatool\_}\meta{style}\verb|_parse_time:NNnTF|
%with regular expression 
%\cs{c\_datatool\_}\meta{variant}\verb|_anchored_|\meta{style}\verb|_time_regex|
%    \begin{macrocode}
\cs_new:Nn \datatool_CA_parse_time:NnTF
 {
   \cs_if_exist:cTF
    {
      c_datatool_
      \l__datatool_CA_timevariant_tl
      _anchored_hhmmss_time_regex 
    }
    {
      \datatool_hhmmss_parse_time:cNnTF
       { 
        c_datatool_
        \l__datatool_CA_timevariant_tl
        _anchored_hhmmss_time_regex 
       }
        #1 { #2 } { #3 } { #4 }
    }
    {
      \PackageWarning { datatool-CA }
       {
        No ~ support ~ for ~ time ~ variant ~
        ` \l__datatool_CA_timevariant_tl '
       }
      #4
    }
 }
%    \end{macrocode}
%\subsubsection{Time Zone Mappings}
%Define time zone mapping command for this region:
%    \begin{macrocode}
\cs_new:Nn \datatool_CA_get_timezone_map:n
 {
   \datatool_region_get_timezone_map:n { CA / #1 }
 }
%    \end{macrocode}
%Define time zone IDs for this region (one-way map from ID to offset):
%    \begin{macrocode}
\datatool_region_set_timezone_map:nn { CA / NDT } { -02:30 }
\datatool_region_set_timezone_map:nn { CA / NST } { -03:30 }
\datatool_region_set_timezone_map:nn { CA / AST } { -04:00 }
\datatool_region_set_timezone_map:nn { CA / ADT } { -03:00 }
\datatool_region_set_timezone_map:nn { CA / EST } { -05:00 }
\datatool_region_set_timezone_map:nn { CA / EDT } { -04:00 }
\datatool_region_set_timezone_map:nn { CA / CST } { -06:00 }
\datatool_region_set_timezone_map:nn { CA / CDT } { -05:00 }
\datatool_region_set_timezone_map:nn { CA / MST } { -07:00 }
\datatool_region_set_timezone_map:nn { CA / MDT } { -06:00 }
\datatool_region_set_timezone_map:nn { CA / PST } { -08:00 }
\datatool_region_set_timezone_map:nn { CA / PDT } { -07:00 }
%    \end{macrocode}
%\subsection{Options}
%Define options for this region:
%    \begin{macrocode}
\datatool_locale_define_keys:nn { CA }
 {
   number-style .code:n =
    {
      \keys_if_exist:nnTF
         { datatool / locale / \l_datatool_current_language_tl - CA }
         { number-style }
       {
         \keys_set:nn 
          { datatool / locale / \l_datatool_current_language_tl - CA }
          { number-style = { #1 } }
       }
       {
         \PackageWarning { datatool-CA }
          {
            No ~ number-style ~ available ~ for ~ current ~ locale ~
            (additional ~ language ~ module ~ may ~ need ~ installing)
          }
       }
    } ,
   currency-symbol-prefix .choice: ,
   currency-symbol-prefix / false .code:n = 
    {
      \cs_set_eq:NN \datatoolCAsymbolprefix \use_none:n
    } ,
   currency-symbol-prefix / true .code:n = 
    {
      \cs_set_eq:NN
        \datatoolCAsymbolprefix
        \datatool_currency_symbol_region_prefix:n
    } ,
   date-style .choice: ,
   date-style / dmyyyy .code: n =
    {
      \tl_set:Nn \l__datatool_CA_datestyle_tl { ddmmyyyy }
    } ,
   date-style / mdyyyy .code: n =
    {
      \tl_set:Nn \l__datatool_CA_datestyle_tl { mmddyyyy }
    } ,
   date-style / yyyymd .code: n =
    {
      \tl_set:Nn \l__datatool_CA_datestyle_tl { yyyymmdd }
    } ,
   date-style / dmyy .code: n =
    {
      \tl_set:Nn \l__datatool_CA_datestyle_tl { ddmmyy }
    } ,
   date-style / mdyy .code: n =
    {
      \tl_set:Nn \l__datatool_CA_datestyle_tl { mmddyy }
    } ,
   date-style / yymd .code: n =
    {
      \tl_set:Nn \l__datatool_CA_datestyle_tl { yymmdd }
    } ,
   date-variant .choice: ,
   date-variant / slash .code:n =
    { 
      \tl_set:Nn \l__datatool_CA_datevariant_tl { slash }
    } ,
   date-variant / hyphen .code:n =
    { 
      \tl_set:Nn \l__datatool_CA_datevariant_tl { hyphen }
    } ,
   date-variant / dot .code:n =
    { 
      \tl_set:Nn \l__datatool_CA_datevariant_tl { dot }
    } ,
   date-variant / dialect .code:n =
    { 
      \tl_set:Nn \l__datatool_CA_datevariant_tl
        { \l_datatool_current_language_tl }
    } ,
   time-variant .choice: ,
   time-variant / colon .code:n =
    { 
      \tl_set:Nn \l__datatool_CA_timevariant_tl { colon }
    } ,
   time-variant / dot .code:n =
    { 
      \tl_set:Nn \l__datatool_CA_timevariant_tl { dot }
    } ,
   time-variant / dialect .code:n =
    { 
      \tl_if_eq:NnTF \l__datatool_CA_timevariant_tl { dot }
       {
         \tl_set:Nn \l__datatool_CA_timevariant_tl
          { \l_datatool_current_language_tl _dot }
       }
       {
         \tl_if_in:NnF
           \l__datatool_CA_timevariant_tl
            { \l_datatool_current_language_tl }
          {
            \tl_set:Nn \l__datatool_CA_timevariant_tl
             { \l_datatool_current_language_tl _colon }
          }
       }
    } ,
   time-variant / dialect-colon .code:n =
    { 
      \tl_set:Nn \l__datatool_CA_timevariant_tl
        { \l_datatool_current_language_tl _colon }
    } ,
   time-variant / dialect-dot .code:n =
    { 
      \tl_set:Nn \l__datatool_CA_timevariant_tl
        { \l_datatool_current_language_tl _dot }
    } ,
 }
%    \end{macrocode}
%\subsection{Hooks}
%Command to update temporal parsing commands for this region:
%    \begin{macrocode}
\newcommand \datatoolCASetTemporalParsers
 {
   \renewcommand \DTLCurrentLocaleParseTimeStamp
    { \datatool_CA_parse_timestamp:NnTF }
   \renewcommand \DTLCurrentLocaleParseDate
    { \datatool_CA_parse_date:NnTF }
   \renewcommand \DTLCurrentLocaleParseTime
    { \datatool_CA_parse_time:NnTF }
   \let
    \DTLCurrentLocaleGetTimeZoneMap
    \datatool_CA_get_timezone_map:n
 }
%    \end{macrocode}
%Set temporal formatting commands for this region. Currently this
%just resets to the default, but may change in future.
%Note that the defaults test if the applicable \sty{datetime2}
%command is available and will fallback on ISO if not defined.
%Bear in mind that the default style for \sty{datetime2} is
%\texttt{iso} so there won't be a noticeable difference unless the
%\sty{datetime2} regional setting is on.
%    \begin{macrocode}
\newcommand \datatoolCASetTemporalFormatters
 {
   \let
    \DTLCurrentLocaleFormatDate
    \datatool_default_date_fmt:nnnn 
   \let
    \DTLCurrentLocaleFormatTime
    \datatool_default_time_fmt:nn
   \let
    \DTLCurrentLocaleFormatTimeZone
    \datatool_default_timezone_fmt:nn
   \let
    \DTLCurrentLocaleFormatTimeStampNoZone
    \datatool_default_timestamp_fmt:nnnnnnn
   \let
    \DTLCurrentLocaleFormatTimeStampWithZone
    \datatool_default_timestamp_fmt:nnnnnnnnn
   \renewcommand \DTLCurrentLocaleTimeStampFmtSep { ~ }
 }
%    \end{macrocode}
%
%Command to update currency and temporal parsing commands for this region:
%\begin{macro}{\DTLCALocaleHook}
%    \begin{macrocode}
\newcommand \DTLCALocaleHook
 {
  \datatoolCASetCurrency
  \datatoolCASetTemporalParsers
  \datatoolCASetTemporalFormatters
%    \end{macrocode}
%Allow language files to reference the region:
%    \begin{macrocode}
  \tl_set:Nn \l_datatool_current_region_tl { CA }
 }
%    \end{macrocode}
%\end{macro}
%
% Finished with \LaTeX3 syntax.
%    \begin{macrocode}
\ExplSyntaxOff
%    \end{macrocode}
%Note that the hook is added to the captions by \sty{datatool-base}
%not by the region file.
